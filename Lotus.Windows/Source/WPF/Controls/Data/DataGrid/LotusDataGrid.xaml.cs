using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Controls;

namespace Lotus.Windows
{
    /**
     * \defgroup WindowsWPFControlsData Элементы для работы с данными
     * \ingroup WindowsWPFControls
     * \brief Элементы для работы с данными.
     * @{
     */
    /// <summary>
    /// Элемент управления отображением данных с расширенной функциональностью.
    /// </summary>
    public partial class LotusDataGrid : DataGrid
    {
        #region Declare DependencyProperty 
        //
        // ФИЛЬТРАЦИЯ ДАННЫХ
        //
        /// <summary>
        /// Предикат фильтрации.
        /// </summary>
        public static readonly DependencyProperty FilterPredicateProperty = DependencyProperty.Register(nameof(FilterPredicate),
            typeof(Predicate<object>), typeof(LotusDataGrid), new FrameworkPropertyMetadata(FilterPredicateDefault,
                FrameworkPropertyMetadataOptions.None));

        /// <summary>
        /// Статус отображения элементов фильтрования у столбцов.
        /// </summary>
        public static readonly DependencyProperty IsShowFilterColumnProperty = DependencyProperty.Register(nameof(IsShowFilterColumn),
            typeof(bool), typeof(LotusDataGrid), new FrameworkPropertyMetadata(false,
                FrameworkPropertyMetadataOptions.AffectsRender | FrameworkPropertyMetadataOptions.AffectsMeasure,
                OnShowFilterColumnChanged));
        #endregion

        #region DependencyProperty methods
        /// <summary>
        /// Предикат фильтрации по умолчанию.
        /// </summary>
        private static Predicate<object> FilterPredicateDefault = delegate { return true; };

        /// <summary>
        /// Обработчик события изменения статуса отображения элементов фильтрования у столбцов.
        /// </summary>
        /// <param name="sender">Источник события.</param>
        /// <param name="args">Аргументы события.</param>
        private static void OnShowFilterColumnChanged(DependencyObject sender, DependencyPropertyChangedEventArgs args)
        {
            var data_grid = (LotusDataGrid)sender;
            var new_value = (bool)args.NewValue;
            if (new_value)
            {
                data_grid.ShowFilterColunm();
            }
            else
            {
                data_grid.HideFilterColunm();
            }
        }
        #endregion

        #region Fields
        #endregion

        #region Properties
        //
        // ФИЛЬТРАЦИЯ ДАННЫХ
        //
        /// <summary>
        /// Статус отображения элементов фильтрования у столбцов.
        /// </summary>
        [Browsable(false)]
        public bool IsShowFilterColumn
        {
            get { return (bool)GetValue(IsShowFilterColumnProperty); }
            set { SetValue(IsShowFilterColumnProperty, value); }
        }

        /// <summary>
        /// Предикат фильтрации.
        /// </summary>
        [Browsable(false)]
        public Predicate<object> FilterPredicate
        {
            get { return (Predicate<object>)GetValue(FilterPredicateProperty); }
            set { SetValue(FilterPredicateProperty, value); }
        }
        #endregion

        #region Constructors
        /// <summary>
        /// Конструктор по умолчанию инициализирует объект класса предустановленными значениями.
        /// </summary>
        public LotusDataGrid()
        {
            InitializeComponent();
            SetResourceReference(StyleProperty, typeof(DataGrid));
        }
        #endregion

        #region Filter methods
        /// <summary>
        /// Показ фильтров в столбцах.
        /// </summary>
        protected void ShowFilterColunm()
        {
            // Method intentionally left empty.
        }

        /// <summary>
        /// Скрытие фильтров в столбцах.
        /// </summary>
        protected void HideFilterColunm()
        {
            // Method intentionally left empty.
        }
        #endregion

        #region Event handlers 
        /// <summary>
        /// Процесс генерирование столбцов.
        /// </summary>
        /// <param name="sender">Источник события.</param>
        /// <param name="args">Аргументы события.</param>
        private void OnDataRecords_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs args)
        {
            args.Cancel = false;
        }

        /// <summary>
        /// Окончание генерирование столбцов.
        /// </summary>
        /// <param name="sender">Источник события.</param>
        /// <param name="args">Аргументы события.</param>
        private void OnDataRecords_AutoGeneratedColumns(object sender, EventArgs args)
        {
            // Method intentionally left empty.
        }

        /// <summary>
        /// Редактирование данных.
        /// </summary>
        /// <remarks>
        /// Возникает перед выходом ячейки из режима редактирования.
        /// </remarks>
        /// <param name="sender">Источник события.</param>
        /// <param name="args">Аргументы события.</param>
        private void OnDataRecords_CellEditEnding(object sender, DataGridCellEditEndingEventArgs args)
        {
            // Method intentionally left empty.
        }
        #endregion
    }
    /**@}*/
}